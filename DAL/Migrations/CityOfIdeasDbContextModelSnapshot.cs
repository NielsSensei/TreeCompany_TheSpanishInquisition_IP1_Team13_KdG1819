// <auto-generated />
using System;
using DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    /*
     * @author Xander Veldeman
     */
    [DbContext(typeof(CityOfIdeasDbContext))]
    partial class CityOfIdeasDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("DAL.Data_Transfer_Objects.AnswersDTO", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnswerText");

                    b.Property<int>("QQuestionID");

                    b.Property<int>("UserID");

                    b.HasKey("AnswerID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.ChoicesDTO", b =>
                {
                    b.Property<int?>("ChoiceID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnswerID");

                    b.Property<int>("OptionID");

                    b.HasKey("ChoiceID");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.DevicesDTO", b =>
                {
                    b.Property<int>("DeviceID")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("LocationX");

                    b.Property<float>("LocationY");

                    b.HasKey("DeviceID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.IdeaFieldsDTO", b =>
                {
                    b.Property<int>("FieldID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FieldStrings");

                    b.Property<string>("FieldText");

                    b.Property<int>("IdeaID");

                    b.Property<float>("LocationX");

                    b.Property<float>("LocationY");

                    b.Property<byte[]>("UploadedImage");

                    b.Property<byte[]>("UploadedMedia");

                    b.Property<string>("Url");

                    b.HasKey("FieldID");

                    b.ToTable("IdeaFields");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.IdeasDTO", b =>
                {
                    b.Property<int>("IdeaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeviceID");

                    b.Property<int>("IQuestionID");

                    b.Property<int>("ParentID");

                    b.Property<bool>("Reported");

                    b.Property<int>("RetweetCount");

                    b.Property<bool>("ReviewByAdmin");

                    b.Property<int>("ShareCount");

                    b.Property<string>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("UserID");

                    b.Property<bool>("VerifiedUser");

                    b.Property<bool>("Visible");

                    b.Property<int>("VoteCount");

                    b.HasKey("IdeaID");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.IdeationQuestionsDTO", b =>
                {
                    b.Property<int>("IQuestionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("ModuleID");

                    b.Property<string>("QuestionTitle");

                    b.Property<string>("WebsiteLink");

                    b.HasKey("IQuestionID");

                    b.ToTable("IdeationQuestions");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.IdeationsDTO", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventID");

                    b.Property<string>("ExtraInfo");

                    b.Property<int?>("MediaFileId");

                    b.Property<bool>("Organisation");

                    b.Property<byte>("RequiredFields");

                    b.Property<int>("UserID");

                    b.Property<bool>("UserIdea");

                    b.HasKey("ModuleID");

                    b.HasIndex("MediaFileId");

                    b.ToTable("Ideations");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.ModulesDTO", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FbLikeCount");

                    b.Property<bool>("IsQuestionnaire");

                    b.Property<int>("LikeCount");

                    b.Property<bool>("OnGoing");

                    b.Property<int>("PhaseID");

                    b.Property<int>("ProjectID");

                    b.Property<int>("RetweetCount");

                    b.Property<int>("ShareCount");

                    b.Property<string>("Tags");

                    b.Property<int>("TwitterLikeCount");

                    b.HasKey("ModuleID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.OptionsDTO", b =>
                {
                    b.Property<int>("OptionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OptionText");

                    b.Property<int>("QQuestionID");

                    b.HasKey("OptionID");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.OrganisationEventsDTO", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("UserID");

                    b.HasKey("EventID");

                    b.ToTable("OrganisationEvents");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.PhasesDTO", b =>
                {
                    b.Property<int>("PhaseID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("ProjectID");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("PhaseID");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.PlatformsDTO", b =>
                {
                    b.Property<int>("PlatformID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("IconImage");

                    b.Property<string>("Name");

                    b.Property<string>("SiteUrl");

                    b.HasKey("PlatformID");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.ProjectImagesDTO", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectID");

                    b.Property<byte[]>("ProjectImage");

                    b.HasKey("ImageID");

                    b.ToTable("ProjectImages");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.ProjectsDTO", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrentPhaseID");

                    b.Property<int>("FbLikeCount");

                    b.Property<string>("Goal");

                    b.Property<int>("LikeCount");

                    b.Property<int>("LikeVisibility");

                    b.Property<int>("PlatformID");

                    b.Property<int>("ReactionCount");

                    b.Property<string>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("TwitterLikeCount");

                    b.Property<int>("UserID");

                    b.Property<bool>("Visible");

                    b.HasKey("ProjectID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.QuestionnaireQuestionsDTO", b =>
                {
                    b.Property<int>("QQuestionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ModuleID");

                    b.Property<byte>("QType");

                    b.Property<string>("QuestionText");

                    b.Property<bool>("Required");

                    b.HasKey("QQuestionID");

                    b.ToTable("QuestionnaireQuestions");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.ReportsDTO", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FlaggerID");

                    b.Property<int>("IdeaID");

                    b.Property<string>("Reason");

                    b.Property<int>("ReportApproved");

                    b.Property<int>("ReporteeID");

                    b.HasKey("ReportID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.UserActivitiesDTO", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionDescription");

                    b.Property<int?>("IQuestionID");

                    b.Property<int?>("IdeaID");

                    b.Property<int?>("ModuleID");

                    b.Property<int>("PlatformID");

                    b.Property<int?>("ProjectID");

                    b.Property<int>("UserID");

                    b.Property<int?>("VoteID");

                    b.HasKey("ActivityID");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.UserDetailsDTO", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<bool>("Banned");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Description");

                    b.Property<byte>("Gender");

                    b.Property<string>("OrgName");

                    b.Property<string>("Zipcode");

                    b.HasKey("UserID");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.UsersDTO", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("PlatformID");

                    b.Property<byte>("Role");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.VotesDTO", b =>
                {
                    b.Property<int>("VoteID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Choices");

                    b.Property<int>("DeviceID");

                    b.Property<int>("InputID");

                    b.Property<byte>("InputType");

                    b.Property<float?>("LocationX");

                    b.Property<float?>("LocationY");

                    b.Property<string>("UserMail");

                    b.HasKey("VoteID");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("DAL.Identity.Data.UIMVCUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<bool>("Banned");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("Gender");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OrgName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("PlatformDetails");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("Zipcode");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Common.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlobPath");

                    b.Property<string>("Extension");

                    b.Property<string>("FileName");

                    b.Property<bool>("UserMedia");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Data_Transfer_Objects.IdeationsDTO", b =>
                {
                    b.HasOne("Domain.Common.Media", "MediaFile")
                        .WithMany()
                        .HasForeignKey("MediaFileId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Identity.Data.UIMVCUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Identity.Data.UIMVCUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Identity.Data.UIMVCUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Identity.Data.UIMVCUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
