@using Domain.Projects
@using Domain.UserInput
@model AddAnswerModel

@{
    QuestionnaireQuestion question = (QuestionnaireQuestion) ViewData["Question"];
    Questionnaire questionnaire = (Questionnaire) ViewData["Questionnaire"];
}
<form asp-action="AnswerQuestionnaire" asp-controller="Questionnaire" method="post" asp-route-questionId="@question.Id" asp-route-questionnaireId="@questionnaire.Id"
      class="row justify-content-center">
    @switch (question.QuestionType)
    {
        case QuestionType.Open:
            <div class="form-group mt-2 col-12">
                <label class="text-center">
                    <h3>@question.QuestionText</h3>
                </label>
                @Html.TextAreaFor(answer => answer.OpenAnswer.AnswerText, new {@class = "w-100 form-control"})
            </div>
            break;

        case QuestionType.Mail:
        {
            Model.OpenAnswer = new OpenAnswer() {IsUserEmail = true};
        }
            <div class="form-group mt-2 col-12">
                <label>
                    <h3>@question.QuestionText</h3>
                </label>
                @Html.HiddenFor(answer => answer.OpenAnswer.IsUserEmail)
                @Html.TextBoxFor(answer => answer.OpenAnswer.AnswerText, new {@class="w-100 form-control"})
            </div>
            break;

        case QuestionType.Drop:
        {
            Model.MultipleAnswer = new MultipleAnswer() {DropdownList = true};
        }
            <div class="form-group mt-2 col-12">
                <label>
                    <h3>@question.QuestionText</h3>
                </label>
                @Html.HiddenFor(answer => answer.MultipleAnswer.DropdownList)
                @Html.DropDownListFor(answer => answer.MultipleAnswer.Choices[0], question.Options.Select(option => new SelectListItem(option, option)), "Maak een keuze", 
                    new {@class="w-100 form-control"})
            </div>
            break;

        case QuestionType.Single:
            <div class="form-group mt-2 col-12">
                <label>
                    <h3>@question.QuestionText</h3>
                </label>
                <div class="row justify-content-around">
                    @foreach (string option in question.Options)
                    {
                        <p>@Html.RadioButtonFor(answer => answer.MultipleAnswer.Choices[0], option) @option</p>
                    }
                </div>


            </div>
            break;

        case QuestionType.Multi:
            <div class="form-group col-12">
                <label>
                    <h3>@question.QuestionText</h3>
                </label>
                @{
            Model.CheckboxAnswers = new List<CheckboxAnswer>();
            question.Options.ForEach(option => Model.CheckboxAnswers.Add(new CheckboxAnswer()));}
                <div class="align-items-center">
                    @for (int i = 0; i < question.Options.Count; i++)
                    {
                        {
                            Model.CheckboxAnswers[i].Value = question.Options[i];
                        }
                        @Html.HiddenFor(answer => answer.CheckboxAnswers[i].Value)
                        <p>@Html.CheckBoxFor(answer => answer.CheckboxAnswers[i].Checked) @question.Options[i]</p>
                    }
                    <p>@Html.CheckBoxFor(answer => answer.CustomAnswer.Checked) @Html.TextBoxFor(answer => answer.CustomAnswer.Value, "anders")</p>
                </div>

            </div>
            break;

        default:
            <p>ERROR: Can't recognize this type of question</p>
            break;
    }
    <input type="submit" class="btn btn-primary text-center" value="Volgende vraag"/>
</form>